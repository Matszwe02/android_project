package com.example.listapp

import Identicon
import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.widthIn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.*
import androidx.compose.material3.Icon
import androidx.compose.material3.NavigationRail
import androidx.compose.material3.NavigationRailItem
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.TextField
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.navigation.NavController
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.tasks.await
import java.util.Locale
import kotlin.coroutines.coroutineContext


fun addShoppingList(userId: String, title: String, icon: Int, content: String, callback: () -> Unit) {
    if (userId.isEmpty()) {
        Log.e("Firebase", "Cannot add shopping list: User is not logged in")
        return
    }

    // Create the ShoppingList object without the ID initially
    val shoppingList = ShoppingList(
        id = "",  // ID will be set after it's pushed
        users = listOf(userId),
        title = title,
        icon = icon,
        content = content
    )

    // Initialize the database reference
    val database = FirebaseDatabase.getInstance().reference
    val newShoppingListRef = database.child("shoppingLists").push()

    // Get the Firebase key generated by push
    val shoppingListId = newShoppingListRef.key

    // Update the shopping list with the Firebase key
    if (shoppingListId != null) {
        // Create a new shopping list object with the updated ID
        val updatedShoppingList = shoppingList.copy(id = shoppingListId)

        // Save the updated object back to Firebase
        newShoppingListRef.setValue(updatedShoppingList)
            .addOnSuccessListener {
                Log.i("Firebase", "Shopping list added successfully with ID: $shoppingListId")
                callback()
            }
            .addOnFailureListener { e ->
                Log.e("Firebase", "Error adding shopping list", e)
            }
    } else {
        Log.e("Firebase", "Failed to generate key for shopping list")
    }
}

fun updateShoppingList(
    listId: String,
    title: String? = null,
    icon: Int? = null,
    users: List<String>? = null,
    callback: () -> Unit
) {
    val database = FirebaseDatabase.getInstance().reference
    val listRef = database.child("shoppingLists").child(listId)

    listRef.get().addOnCompleteListener { task ->
        if (task.isSuccessful) {
            val snapshot = task.result
            val currentList = snapshot.getValue(ShoppingList::class.java)

            if (currentList != null) {
                val updatedList = currentList.copy(
                    title = title ?: currentList.title,
                    icon = icon ?: currentList.icon,
                    users = users ?: currentList.users
                )

                listRef.setValue(updatedList)
                    .addOnSuccessListener {
                        callback()
                    }
                    .addOnFailureListener { e ->
                        Log.e("Firebase", "Error updating shopping list", e)
                    }
            }
        } else {
            Log.e("Firebase", "Error fetching shopping list", task.exception)
        }
    }
}


fun removeShoppingList(listId: String, callback: () -> Unit) {
    val database = FirebaseDatabase.getInstance().reference
    val listRef = database.child("shoppingLists").child(listId)

    listRef.removeValue()
        .addOnSuccessListener {
            callback()
        }
        .addOnFailureListener { e ->
            Log.e("Firebase", "Error removing shopping list", e)
        }
}


@Composable
fun NavRail(shoppingListsClass: ShoppingLists, navController: NavController, authViewModel: AuthViewModel) {

    val context = LocalContext.current
    val iconDictionary = mapOf(
        1 to Icons.Filled.ShoppingCart,
        2 to Icons.Filled.Place,
        3 to Icons.Filled.Home,
        4 to Icons.Filled.Star,
        5 to Icons.Filled.Favorite,
        // Add more icons as needed
    )

    var selectedItem by remember { mutableIntStateOf(0) }
    var selectedListId by remember { mutableStateOf("") } // Variable to hold the selected list's ID

    var shoppingLists by remember { mutableStateOf(shoppingListsClass.getState()) }

    shoppingListsClass.modifyCallbacks.add {shoppingLists = shoppingListsClass.getState()}


    val topItem = "Account"
    val bottomItem = "App Settings"
    var userId by remember { mutableStateOf(FirebaseAuth.getInstance().currentUser?.uid ?: "") }
    var showPopup by remember { mutableStateOf(false) }
    var selectedListForPopup by remember { mutableStateOf<ShoppingList?>(null) }

    authViewModel.addAuthCallback { userId = FirebaseAuth.getInstance().currentUser?.uid ?: "" }

    NavigationRail(modifier = Modifier.widthIn(max = 70.dp)) {
        Column(
            modifier = Modifier
                .fillMaxHeight()
                .background(color = Color(0.5f, 0.5f, 0.5f, 0.2f)),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            NavigationRailItem(
                modifier = Modifier.padding(bottom = 20.dp),
                icon = { Identicon(userId.ifEmpty { "" }, size = 20.dp) },
                label = { Text(topItem) },
                selected = selectedItem == 0,
                onClick = { selectedItem = 0; navController.navigate("account") }
            )

            if (userId.isNotEmpty()) {
                LazyColumn(
                    modifier = Modifier.weight(1f)
                ) {
                    // List of shopping lists
                    itemsIndexed(shoppingLists) { index, shoppingList ->
                        Box(modifier = Modifier.padding(vertical = 12.dp)) {
                            NavigationRailItem(
//                                modifier = Modifier.padding(vertical = 20.dp),
                                icon = {
                                    Icon(
                                        iconDictionary[shoppingList.icon] ?: Icons.Filled.ShoppingCart,
                                        contentDescription = shoppingList.title
                                    )
                                },
                                label = {
                                    Text(
                                        text = shoppingList.title,
                                        maxLines = 2,
                                        overflow = TextOverflow.Ellipsis,
                                        textAlign = TextAlign.Center
                                    )
                                },
                                selected = selectedItem == index + 1,
                                onClick = {

                                    if (selectedItem == index + 1)
                                    {
                                        selectedListForPopup = shoppingList
                                        showPopup = true
                                    }

                                    selectedItem = index + 1
                                    selectedListId = shoppingList.id
                                    Log.i("ID", "Shopping list selected has ID: $selectedListId")
                                    navController.navigate("home/$selectedListId")
                                    shoppingListsClass.Callback()
                                }
                            )
                            if (selectedItem == index + 1) {
                                Icon(
                                    imageVector = Icons.Filled.Edit,
                                    contentDescription = "Edit",
                                    modifier = Modifier
                                        .align(Alignment.TopEnd)
                                        .padding(end = 4.dp)
                                        .alpha(0.5f)
                                        .size(18.dp)
                                )
                            }
                        }



                    }

                    item {
                        NavigationRailItem(
                            modifier = Modifier
                                .padding(vertical = 20.dp),
                            icon = {
                                Icon(
                                    Icons.Filled.Add,
                                    contentDescription = "Add Shopping List"
                                )
                            },
                            label = {
                                Text(
                                    text = "Add",
                                    maxLines = 2,
                                    overflow = TextOverflow.Ellipsis,
                                    textAlign = TextAlign.Center
                                )
                            },
                            selected = selectedItem == shoppingLists.size + 1,
                            onClick = {
                                selectedItem = shoppingLists.size + 1
                                Log.i("nav", "Add button clicked")
                                addShoppingList(
                                    userId = userId,
                                    title = "New Shopping List",
                                    icon = 1, // Default icon
                                    content = "",
                                    callback = { shoppingListsClass.Callback() }
                                )
                            }
                        )
                    }
                }
            }

            NavigationRailItem(
                icon = { Icon(Icons.Filled.Settings, contentDescription = bottomItem) },
                label = {
                    Text(
                        text = bottomItem,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis,
                        textAlign = TextAlign.Center
                    )
                },
                selected = selectedItem == shoppingLists.size + 1, // After all shopping lists
                onClick = { selectedItem = shoppingLists.size + 1; navController.navigate("settings") }
            )
        }
    }

    if (showPopup && selectedListForPopup != null) {
        PopupDialog(
            list = selectedListForPopup!!,
            onClose = {
                showPopup = false
                selectedListForPopup = null
            },
            onUpdate = { newName, newIcon, newUsers ->
                updateShoppingList(
                    listId = selectedListForPopup!!.id,
                    title = newName,
                    icon = newIcon,
                    users = newUsers,
                    callback = { shoppingListsClass.Callback() }
                )
            },
            onDelete = {
                removeShoppingList(
                    listId = selectedListForPopup!!.id,
                    callback = { shoppingListsClass.Callback() }
                )
            },
            context = context
        )
    }


}



@Composable
fun PopupDialog(
    list: ShoppingList,
    onClose: () -> Unit,
    onUpdate: (String, Int, List<String>) -> Unit,
    onDelete: () -> Unit,
    context: Context
) {
    var title by remember { mutableStateOf(list.title) }
    var iconIndex by remember { mutableStateOf(list.icon) }
    val users = remember { mutableStateListOf<String>().apply { addAll(list.users) } }
    var newUserEmail by remember { mutableStateOf("") }

    val iconDictionary = mapOf(
        1 to Icons.Filled.ShoppingCart,
        2 to Icons.Filled.Place,
        3 to Icons.Filled.Home,
        4 to Icons.Filled.Star,
        5 to Icons.Filled.Favorite,
    )

    // State to hold user emails and names
    val userEmails = remember { mutableStateMapOf<String, String>() }
    val userNames = remember { mutableStateMapOf<String, String>() }

    // Use LaunchedEffect to load user email and names asynchronously
//    LaunchedEffect(users) {
//        users.forEach { userId ->
//            // Load email if not already cached
//            if (userEmails[userId] == null) {
//                var it = getUserEmailFromId(userId)
//                email.let { userEmails[userId] = it }
//            }
//            // Load name if not already cached
//            if (userNames[userId] == null) {
//                var it = getUserNameFromId(userId)
//                name.let { userNames[userId] = it }
//                }
//            }
//        }
//    }

    AlertDialog(
        onDismissRequest = onClose,
        title = { Text("Edit Shopping List") },
        text = {
            Column {
                TextField(
                    value = title,
                    onValueChange = { title = it },
                    label = { Text("List Name") }
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text("Select Icon:")
                LazyRow(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    items(iconDictionary.keys.toList()) { iconKey ->
                        IconButton(
                            onClick = { iconIndex = iconKey },
                            modifier = Modifier.padding(4.dp)
                        ) {
                            Icon(
                                imageVector = iconDictionary[iconKey] ?: Icons.Filled.ShoppingCart,
                                contentDescription = "Icon $iconKey",
                                tint = if (iconIndex == iconKey) Color.Blue else Color.Black
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))
                Text("Users:")
                LazyColumn {
                    items(users) { userId ->
                        val userEmail by getUserEmailFromId(userId).collectAsState(initial = null)
                        val userName by getUserNameFromId(userId).collectAsState(initial = null)
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Identicon(userId.ifEmpty { "" }, size = 20.dp)
                            Column {
                                Text(userName ?: "Loading...")
                                Text(
                                    userEmail ?: "No email",
                                    style = MaterialTheme.typography.bodySmall
                                )
                            }
                            IconButton(
                                onClick = {
                                    users.remove(userId)
                                }
                            ) {
                                Icon(Icons.Filled.Delete, contentDescription = "Remove User")
                            }
                        }
                    }
                }

                TextField(
                    value = newUserEmail,
                    onValueChange = { newUserEmail = it },
                    label = { Text("Add User Email") },
                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Email),
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                if (newUserEmail.isNotBlank()) {
                                    getUserIdFromEmail(newUserEmail) { newUserId ->
                                        if (newUserId != null && !users.contains(newUserId)) {
                                            users.add(newUserId)
                                            newUserEmail = "" // Clear the input field after adding
                                        }
                                        else
                                        {
                                            Toast.makeText(context, "User does not exist!", Toast.LENGTH_SHORT).show()
                                        }
                                    }
                                }
                            }
                        ) {
                            Icon(Icons.Filled.AddCircle, contentDescription = "Add User")
                        }
                    }
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        onDelete()
                        onClose()
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = Color.Red),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Delete", color = Color.White)
                }
            }
        },
        confirmButton = {
            Button(onClick = {
                if (users.isEmpty())
                    onDelete()
                else
                    onUpdate(title, iconIndex, users)
                onClose()
            }) {
                Text("Save")
            }
        },
        dismissButton = {
            Button(onClick = onClose) {
                Text("Cancel")
            }
        }
    )
}

private fun getUserEmailFromId(userId: String): Flow<String?> = flow {
    val userRef = FirebaseDatabase.getInstance().getReference("users").child(userId).child("email")
    val snapshot = userRef.get().await()
    val email = snapshot.getValue(String::class.java)
    emit(email)
}


// Get the user's name based on their userId
private fun getUserNameFromId(userId: String): Flow<String?> = flow {
    val userRef = FirebaseDatabase.getInstance().getReference("users").child(userId).child("name")
    val snapshot = userRef.get().await()
    val name = snapshot.getValue(String::class.java)
    emit(name)
}


private fun getUserIdFromEmail(email: String, callback: (String?) -> Unit) {
    val normalizedEmail = email.trim().lowercase(Locale.ROOT)
    val usersRef = FirebaseDatabase.getInstance().getReference("users")

    usersRef.get().addOnCompleteListener { task ->
        if (task.isSuccessful) {
            val snapshot = task.result
            if (snapshot.exists()) {
                val matchingUser = snapshot.children.find { childSnapshot ->
                    val storedEmail = childSnapshot.child("email").getValue(String::class.java)?.trim()?.lowercase(Locale.ROOT)
                    storedEmail == normalizedEmail
                }
                callback(matchingUser?.key)
            } else {
                callback(null)
            }
        } else {
            Log.e("FirebaseDebug", "Error fetching users", task.exception)
            callback(null)
        }
    }
}
