package com.example.listapp

import Identicon
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.widthIn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.*
import androidx.compose.material3.Icon
import androidx.compose.material3.NavigationRail
import androidx.compose.material3.NavigationRailItem
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material3.Button
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.navigation.NavController
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import kotlin.coroutines.coroutineContext


fun addShoppingList(userId: String, title: String, icon: Int, content: String, shoppingListsClass: ShoppingLists) {
    if (userId.isEmpty()) {
        Log.e("Firebase", "Cannot add shopping list: User is not logged in")
        return
    }

    // Create the ShoppingList object without the ID initially
    val shoppingList = ShoppingList(
        id = "",  // ID will be set after it's pushed
        users = listOf(userId),
        title = title,
        icon = icon,
        content = content
    )

    // Initialize the database reference
    val database = FirebaseDatabase.getInstance().reference
    val newShoppingListRef = database.child("shoppingLists").push()

    // Get the Firebase key generated by push
    val shoppingListId = newShoppingListRef.key

    // Update the shopping list with the Firebase key
    if (shoppingListId != null) {
        // Create a new shopping list object with the updated ID
        val updatedShoppingList = shoppingList.copy(id = shoppingListId)

        // Save the updated object back to Firebase
        newShoppingListRef.setValue(updatedShoppingList)
            .addOnSuccessListener {
                Log.i("Firebase", "Shopping list added successfully with ID: $shoppingListId")
                shoppingListsClass.Callback()
            }
            .addOnFailureListener { e ->
                Log.e("Firebase", "Error adding shopping list", e)
            }
    } else {
        Log.e("Firebase", "Failed to generate key for shopping list")
    }
}


@Composable
fun NavRail(shoppingListsClass: ShoppingLists, navController: NavController, authViewModel: AuthViewModel) {

    val iconDictionary = mapOf(
        1 to Icons.Filled.ShoppingCart,
        2 to Icons.Filled.Place,
        3 to Icons.Filled.Home,
        4 to Icons.Filled.Star,
        5 to Icons.Filled.Favorite,
        // Add more icons as needed
    )

    var selectedItem by remember { mutableIntStateOf(0) }
    var selectedListId by remember { mutableStateOf("") } // Variable to hold the selected list's ID

    var shoppingLists by remember { mutableStateOf(shoppingListsClass.getState()) }

    shoppingListsClass.modifyCallbacks.add {shoppingLists = shoppingListsClass.getState()}


    val topItem = "Account"
    val bottomItem = "App Settings"
    var userId by remember { mutableStateOf(FirebaseAuth.getInstance().currentUser?.uid ?: "") }

    authViewModel.addAuthCallback { userId = FirebaseAuth.getInstance().currentUser?.uid ?: "" }

    NavigationRail(modifier = Modifier.widthIn(max = 70.dp)) {
        Column(
            modifier = Modifier
                .fillMaxHeight()
                .background(color = Color(0.5f, 0.5f, 0.5f, 0.2f)),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            NavigationRailItem(
                modifier = Modifier.padding(bottom = 20.dp),
                icon = { Identicon(userId.ifEmpty { "" }, size = 20.dp) },
                label = { Text(topItem) },
                selected = selectedItem == 0,
                onClick = { selectedItem = 0; navController.navigate("account") }
            )

            if (userId.isNotEmpty()) {
                LazyColumn(
                    modifier = Modifier
                        .weight(1f)
                ) {
                    // List of shopping lists
                    itemsIndexed(shoppingLists) { index, shoppingList ->
                        NavigationRailItem(
                            modifier = Modifier
                                .padding(vertical = 20.dp),
                            icon = {
                                Icon(
                                    iconDictionary[shoppingList.icon] ?: Icons.Filled.ShoppingCart,
                                    contentDescription = shoppingList.title
                                )
                            },
                            label = {
                                Text(
                                    text = shoppingList.title,
                                    maxLines = 2,
                                    overflow = TextOverflow.Ellipsis,
                                    textAlign = TextAlign.Center
                                )
                            },
                            selected = selectedItem == index + 1,
                            onClick = {
                                selectedItem = index + 1
                                selectedListId = shoppingList.id
                                Log.i("ID", "Shopping list selected has ID: $selectedListId")
                                navController.navigate("home/$selectedListId")
                                shoppingListsClass.Callback()
                            }
                        )
                    }

                    item {
                        NavigationRailItem(
                            modifier = Modifier
                                .padding(vertical = 20.dp),
                            icon = {
                                Icon(
                                    Icons.Filled.Add,
                                    contentDescription = "Add Shopping List"
                                )
                            },
                            label = {
                                Text(
                                    text = "Add",
                                    maxLines = 2,
                                    overflow = TextOverflow.Ellipsis,
                                    textAlign = TextAlign.Center
                                )
                            },
                            selected = selectedItem == shoppingLists.size + 1,
                            onClick = {
                                selectedItem = shoppingLists.size + 1
                                Log.i("nav", "Add button clicked")
                                addShoppingList(
                                    userId = userId,
                                    title = "New Shopping List",
                                    icon = 1, // Default icon
                                    content = "Default content",
                                    shoppingListsClass = shoppingListsClass
                                )
                            }
                        )
                    }
                }
            }

            NavigationRailItem(
                icon = { Icon(Icons.Filled.Settings, contentDescription = bottomItem) },
                label = {
                    Text(
                        text = bottomItem,
                        maxLines = 2,
                        overflow = TextOverflow.Ellipsis,
                        textAlign = TextAlign.Center
                    )
                },
                selected = selectedItem == shoppingLists.size + 1, // After all shopping lists
                onClick = { selectedItem = shoppingLists.size + 1; navController.navigate("settings") }
            )
        }
    }
}

